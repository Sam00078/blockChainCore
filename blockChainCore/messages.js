// This file is auto generated by the protocol-buffers cli tool

/* eslint-disable quotes */
/* eslint-disable indent */
/* eslint-disable no-redeclare */
/* eslint-disable camelcase */

// Remember to `npm install --save protocol-buffers-encodings`
var encodings = require('protocol-buffers-encodings')
var varint = encodings.varint
var skip = encodings.skip

var Block = exports.Block = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Transaction = exports.Transaction = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Transaction_type_0 = exports.Transaction_type_0 = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Transaction_type_1 = exports.Transaction_type_1 = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Sign = exports.Sign = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Bill = exports.Bill = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var OrgElmForm = exports.OrgElmForm = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var OrgElmFormDel = exports.OrgElmFormDel = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Asset = exports.Asset = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Asset_kind_2 = exports.Asset_kind_2 = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Asset_kind_10 = exports.Asset_kind_10 = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Asset_kind_11 = exports.Asset_kind_11 = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Asset_kind_12 = exports.Asset_kind_12 = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Asset_kind_4 = exports.Asset_kind_4 = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Asset_kind_5 = exports.Asset_kind_5 = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Asset_kind_7 = exports.Asset_kind_7 = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Asset_kind_6 = exports.Asset_kind_6 = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Asset_kind_8 = exports.Asset_kind_8 = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Asset_kind_9 = exports.Asset_kind_9 = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Asset_kind_1 = exports.Asset_kind_1 = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Asset_kind_3 = exports.Asset_kind_3 = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

defineBlock()
defineTransaction()
defineTransaction_type_0()
defineTransaction_type_1()
defineSign()
defineBill()
defineOrgElmForm()
defineOrgElmFormDel()
defineAsset()
defineAsset_kind_2()
defineAsset_kind_10()
defineAsset_kind_11()
defineAsset_kind_12()
defineAsset_kind_4()
defineAsset_kind_5()
defineAsset_kind_7()
defineAsset_kind_6()
defineAsset_kind_8()
defineAsset_kind_9()
defineAsset_kind_1()
defineAsset_kind_3()

function defineBlock () {
  var enc = [
    encodings.varint,
    encodings.bytes,
    Transaction
  ]

  Block.encodingLength = encodingLength
  Block.encode = encode
  Block.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.version)) {
      var len = enc[0].encodingLength(obj.version)
      length += 1 + len
    }
    if (defined(obj.height)) {
      var len = enc[0].encodingLength(obj.height)
      length += 1 + len
    }
    if (defined(obj.hash)) {
      var len = enc[1].encodingLength(obj.hash)
      length += 1 + len
    }
    if (defined(obj.prevBlock)) {
      var len = enc[1].encodingLength(obj.prevBlock)
      length += 1 + len
    }
    if (defined(obj.mrklRoot)) {
      var len = enc[1].encodingLength(obj.mrklRoot)
      length += 1 + len
    }
    if (defined(obj.transactions)) {
      for (var i = 0; i < obj.transactions.length; i++) {
        if (!defined(obj.transactions[i])) continue
        var len = enc[2].encodingLength(obj.transactions[i])
        length += varint.encodingLength(len)
        length += 1 + len
      }
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.version)) {
      buf[offset++] = 8
      enc[0].encode(obj.version, buf, offset)
      offset += enc[0].encode.bytes
    }
    if (defined(obj.height)) {
      buf[offset++] = 16
      enc[0].encode(obj.height, buf, offset)
      offset += enc[0].encode.bytes
    }
    if (defined(obj.hash)) {
      buf[offset++] = 26
      enc[1].encode(obj.hash, buf, offset)
      offset += enc[1].encode.bytes
    }
    if (defined(obj.prevBlock)) {
      buf[offset++] = 34
      enc[1].encode(obj.prevBlock, buf, offset)
      offset += enc[1].encode.bytes
    }
    if (defined(obj.mrklRoot)) {
      buf[offset++] = 42
      enc[1].encode(obj.mrklRoot, buf, offset)
      offset += enc[1].encode.bytes
    }
    if (defined(obj.transactions)) {
      for (var i = 0; i < obj.transactions.length; i++) {
        if (!defined(obj.transactions[i])) continue
        buf[offset++] = 50
        varint.encode(enc[2].encodingLength(obj.transactions[i]), buf, offset)
        offset += varint.encode.bytes
        enc[2].encode(obj.transactions[i], buf, offset)
        offset += enc[2].encode.bytes
      }
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      version: 0,
      height: 0,
      hash: null,
      prevBlock: null,
      mrklRoot: null,
      transactions: []
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.version = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        case 2:
        obj.height = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        case 3:
        obj.hash = enc[1].decode(buf, offset)
        offset += enc[1].decode.bytes
        break
        case 4:
        obj.prevBlock = enc[1].decode(buf, offset)
        offset += enc[1].decode.bytes
        break
        case 5:
        obj.mrklRoot = enc[1].decode(buf, offset)
        offset += enc[1].decode.bytes
        break
        case 6:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.transactions.push(enc[2].decode(buf, offset, offset + len))
        offset += enc[2].decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineTransaction () {
  var enc = [
    Transaction_type_0,
    Transaction_type_1
  ]

  Transaction.encodingLength = encodingLength
  Transaction.encode = encode
  Transaction.decode = decode

  function encodingLength (obj) {
    var length = 0
    if ((+defined(obj.transaction_type_0) + +defined(obj.transaction_type_1)) > 1) throw new Error("only one of the properties defined in oneof transaction_type can be set")
    if (defined(obj.transaction_type_0)) {
      var len = enc[0].encodingLength(obj.transaction_type_0)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    if (defined(obj.transaction_type_1)) {
      var len = enc[1].encodingLength(obj.transaction_type_1)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if ((+defined(obj.transaction_type_0) + +defined(obj.transaction_type_1)) > 1) throw new Error("only one of the properties defined in oneof transaction_type can be set")
    if (defined(obj.transaction_type_0)) {
      buf[offset++] = 10
      varint.encode(enc[0].encodingLength(obj.transaction_type_0), buf, offset)
      offset += varint.encode.bytes
      enc[0].encode(obj.transaction_type_0, buf, offset)
      offset += enc[0].encode.bytes
    }
    if (defined(obj.transaction_type_1)) {
      buf[offset++] = 18
      varint.encode(enc[1].encodingLength(obj.transaction_type_1), buf, offset)
      offset += varint.encode.bytes
      enc[1].encode(obj.transaction_type_1, buf, offset)
      offset += enc[1].encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      transaction_type_0: null,
      transaction_type_1: null
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        delete obj.transaction_type_1
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.transaction_type_0 = enc[0].decode(buf, offset, offset + len)
        offset += enc[0].decode.bytes
        break
        case 2:
        delete obj.transaction_type_0
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.transaction_type_1 = enc[1].decode(buf, offset, offset + len)
        offset += enc[1].decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineTransaction_type_0 () {
  var enc = [
    encodings.string,
    encodings.varint,
    Sign
  ]

  Transaction_type_0.encodingLength = encodingLength
  Transaction_type_0.encode = encode
  Transaction_type_0.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.message)) {
      var len = enc[0].encodingLength(obj.message)
      length += 1 + len
    }
    if (defined(obj.nonce)) {
      var len = enc[1].encodingLength(obj.nonce)
      length += 1 + len
    }
    if (defined(obj.type)) {
      var len = enc[1].encodingLength(obj.type)
      length += 1 + len
    }
    if (defined(obj.time)) {
      var len = enc[1].encodingLength(obj.time)
      length += 1 + len
    }
    if (defined(obj.signs)) {
      for (var i = 0; i < obj.signs.length; i++) {
        if (!defined(obj.signs[i])) continue
        var len = enc[2].encodingLength(obj.signs[i])
        length += varint.encodingLength(len)
        length += 1 + len
      }
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.message)) {
      buf[offset++] = 90
      enc[0].encode(obj.message, buf, offset)
      offset += enc[0].encode.bytes
    }
    if (defined(obj.nonce)) {
      buf[offset++] = 96
      enc[1].encode(obj.nonce, buf, offset)
      offset += enc[1].encode.bytes
    }
    if (defined(obj.type)) {
      buf[offset++] = 8
      enc[1].encode(obj.type, buf, offset)
      offset += enc[1].encode.bytes
    }
    if (defined(obj.time)) {
      buf[offset++] = 16
      enc[1].encode(obj.time, buf, offset)
      offset += enc[1].encode.bytes
    }
    if (defined(obj.signs)) {
      for (var i = 0; i < obj.signs.length; i++) {
        if (!defined(obj.signs[i])) continue
        buf[offset++] = 26
        varint.encode(enc[2].encodingLength(obj.signs[i]), buf, offset)
        offset += varint.encode.bytes
        enc[2].encode(obj.signs[i], buf, offset)
        offset += enc[2].encode.bytes
      }
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      message: "",
      nonce: 0,
      type: 0,
      time: 0,
      signs: []
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 11:
        obj.message = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        case 12:
        obj.nonce = enc[1].decode(buf, offset)
        offset += enc[1].decode.bytes
        break
        case 1:
        obj.type = enc[1].decode(buf, offset)
        offset += enc[1].decode.bytes
        break
        case 2:
        obj.time = enc[1].decode(buf, offset)
        offset += enc[1].decode.bytes
        break
        case 3:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.signs.push(enc[2].decode(buf, offset, offset + len))
        offset += enc[2].decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineTransaction_type_1 () {
  var enc = [
    encodings.varint,
    Asset,
    Sign
  ]

  Transaction_type_1.encodingLength = encodingLength
  Transaction_type_1.encode = encode
  Transaction_type_1.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.fee)) {
      var len = enc[0].encodingLength(obj.fee)
      length += 1 + len
    }
    if (defined(obj.feeUnit)) {
      var len = enc[0].encodingLength(obj.feeUnit)
      length += 1 + len
    }
    if (defined(obj.assets)) {
      for (var i = 0; i < obj.assets.length; i++) {
        if (!defined(obj.assets[i])) continue
        var len = enc[1].encodingLength(obj.assets[i])
        length += varint.encodingLength(len)
        length += 1 + len
      }
    }
    if (defined(obj.type)) {
      var len = enc[0].encodingLength(obj.type)
      length += 1 + len
    }
    if (defined(obj.time)) {
      var len = enc[0].encodingLength(obj.time)
      length += 1 + len
    }
    if (defined(obj.signs)) {
      for (var i = 0; i < obj.signs.length; i++) {
        if (!defined(obj.signs[i])) continue
        var len = enc[2].encodingLength(obj.signs[i])
        length += varint.encodingLength(len)
        length += 1 + len
      }
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.fee)) {
      buf[offset++] = 88
      enc[0].encode(obj.fee, buf, offset)
      offset += enc[0].encode.bytes
    }
    if (defined(obj.feeUnit)) {
      buf[offset++] = 96
      enc[0].encode(obj.feeUnit, buf, offset)
      offset += enc[0].encode.bytes
    }
    if (defined(obj.assets)) {
      for (var i = 0; i < obj.assets.length; i++) {
        if (!defined(obj.assets[i])) continue
        buf[offset++] = 106
        varint.encode(enc[1].encodingLength(obj.assets[i]), buf, offset)
        offset += varint.encode.bytes
        enc[1].encode(obj.assets[i], buf, offset)
        offset += enc[1].encode.bytes
      }
    }
    if (defined(obj.type)) {
      buf[offset++] = 8
      enc[0].encode(obj.type, buf, offset)
      offset += enc[0].encode.bytes
    }
    if (defined(obj.time)) {
      buf[offset++] = 16
      enc[0].encode(obj.time, buf, offset)
      offset += enc[0].encode.bytes
    }
    if (defined(obj.signs)) {
      for (var i = 0; i < obj.signs.length; i++) {
        if (!defined(obj.signs[i])) continue
        buf[offset++] = 26
        varint.encode(enc[2].encodingLength(obj.signs[i]), buf, offset)
        offset += varint.encode.bytes
        enc[2].encode(obj.signs[i], buf, offset)
        offset += enc[2].encode.bytes
      }
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      fee: 0,
      feeUnit: 0,
      assets: [],
      type: 0,
      time: 0,
      signs: []
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 11:
        obj.fee = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        case 12:
        obj.feeUnit = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        case 13:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.assets.push(enc[1].decode(buf, offset, offset + len))
        offset += enc[1].decode.bytes
        break
        case 1:
        obj.type = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        case 2:
        obj.time = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        case 3:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.signs.push(enc[2].decode(buf, offset, offset + len))
        offset += enc[2].decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineSign () {
  var enc = [
    encodings.bytes
  ]

  Sign.encodingLength = encodingLength
  Sign.encode = encode
  Sign.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.publicKey)) {
      var len = enc[0].encodingLength(obj.publicKey)
      length += 1 + len
    }
    if (defined(obj.signature)) {
      var len = enc[0].encodingLength(obj.signature)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.publicKey)) {
      buf[offset++] = 10
      enc[0].encode(obj.publicKey, buf, offset)
      offset += enc[0].encode.bytes
    }
    if (defined(obj.signature)) {
      buf[offset++] = 18
      enc[0].encode(obj.signature, buf, offset)
      offset += enc[0].encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      publicKey: null,
      signature: null
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.publicKey = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        case 2:
        obj.signature = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineBill () {
  var enc = [
    encodings.varint
  ]

  Bill.encodingLength = encodingLength
  Bill.encode = encode
  Bill.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.amount)) {
      var len = enc[0].encodingLength(obj.amount)
      length += 1 + len
    }
    if (defined(obj.unit)) {
      var len = enc[0].encodingLength(obj.unit)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.amount)) {
      buf[offset++] = 8
      enc[0].encode(obj.amount, buf, offset)
      offset += enc[0].encode.bytes
    }
    if (defined(obj.unit)) {
      buf[offset++] = 16
      enc[0].encode(obj.unit, buf, offset)
      offset += enc[0].encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      amount: 0,
      unit: 0
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.amount = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        case 2:
        obj.unit = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineOrgElmForm () {
  var enc = [
    encodings.string,
    encodings.varint
  ]

  OrgElmForm.encodingLength = encodingLength
  OrgElmForm.encode = encode
  OrgElmForm.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.address)) {
      var len = enc[0].encodingLength(obj.address)
      length += 1 + len
    }
    if (defined(obj.vote)) {
      var len = enc[1].encodingLength(obj.vote)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.address)) {
      buf[offset++] = 10
      enc[0].encode(obj.address, buf, offset)
      offset += enc[0].encode.bytes
    }
    if (defined(obj.vote)) {
      buf[offset++] = 16
      enc[1].encode(obj.vote, buf, offset)
      offset += enc[1].encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      address: "",
      vote: 0
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.address = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        case 2:
        obj.vote = enc[1].decode(buf, offset)
        offset += enc[1].decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineOrgElmFormDel () {
  var enc = [
    encodings.string
  ]

  OrgElmFormDel.encodingLength = encodingLength
  OrgElmFormDel.encode = encode
  OrgElmFormDel.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.address)) {
      var len = enc[0].encodingLength(obj.address)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.address)) {
      buf[offset++] = 10
      enc[0].encode(obj.address, buf, offset)
      offset += enc[0].encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      address: ""
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.address = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineAsset () {
  var enc = [
    Asset_kind_2,
    Asset_kind_10,
    Asset_kind_11,
    Asset_kind_12,
    Asset_kind_4,
    Asset_kind_5,
    Asset_kind_7,
    Asset_kind_6,
    Asset_kind_8,
    Asset_kind_9,
    Asset_kind_1,
    Asset_kind_3
  ]

  Asset.encodingLength = encodingLength
  Asset.encode = encode
  Asset.decode = decode

  function encodingLength (obj) {
    var length = 0
    if ((+defined(obj.asset_kind_2) + +defined(obj.asset_kind_10) + +defined(obj.asset_kind_11) + +defined(obj.asset_kind_12) + +defined(obj.asset_kind_4) + +defined(obj.asset_kind_5) + +defined(obj.asset_kind_7) + +defined(obj.asset_kind_6) + +defined(obj.asset_kind_8) + +defined(obj.asset_kind_9) + +defined(obj.asset_kind_1) + +defined(obj.asset_kind_3)) > 1) throw new Error("only one of the properties defined in oneof asset_kind can be set")
    if (defined(obj.asset_kind_2)) {
      var len = enc[0].encodingLength(obj.asset_kind_2)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    if (defined(obj.asset_kind_10)) {
      var len = enc[1].encodingLength(obj.asset_kind_10)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    if (defined(obj.asset_kind_11)) {
      var len = enc[2].encodingLength(obj.asset_kind_11)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    if (defined(obj.asset_kind_12)) {
      var len = enc[3].encodingLength(obj.asset_kind_12)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    if (defined(obj.asset_kind_4)) {
      var len = enc[4].encodingLength(obj.asset_kind_4)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    if (defined(obj.asset_kind_5)) {
      var len = enc[5].encodingLength(obj.asset_kind_5)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    if (defined(obj.asset_kind_7)) {
      var len = enc[6].encodingLength(obj.asset_kind_7)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    if (defined(obj.asset_kind_6)) {
      var len = enc[7].encodingLength(obj.asset_kind_6)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    if (defined(obj.asset_kind_8)) {
      var len = enc[8].encodingLength(obj.asset_kind_8)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    if (defined(obj.asset_kind_9)) {
      var len = enc[9].encodingLength(obj.asset_kind_9)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    if (defined(obj.asset_kind_1)) {
      var len = enc[10].encodingLength(obj.asset_kind_1)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    if (defined(obj.asset_kind_3)) {
      var len = enc[11].encodingLength(obj.asset_kind_3)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if ((+defined(obj.asset_kind_2) + +defined(obj.asset_kind_10) + +defined(obj.asset_kind_11) + +defined(obj.asset_kind_12) + +defined(obj.asset_kind_4) + +defined(obj.asset_kind_5) + +defined(obj.asset_kind_7) + +defined(obj.asset_kind_6) + +defined(obj.asset_kind_8) + +defined(obj.asset_kind_9) + +defined(obj.asset_kind_1) + +defined(obj.asset_kind_3)) > 1) throw new Error("only one of the properties defined in oneof asset_kind can be set")
    if (defined(obj.asset_kind_2)) {
      buf[offset++] = 18
      varint.encode(enc[0].encodingLength(obj.asset_kind_2), buf, offset)
      offset += varint.encode.bytes
      enc[0].encode(obj.asset_kind_2, buf, offset)
      offset += enc[0].encode.bytes
    }
    if (defined(obj.asset_kind_10)) {
      buf[offset++] = 82
      varint.encode(enc[1].encodingLength(obj.asset_kind_10), buf, offset)
      offset += varint.encode.bytes
      enc[1].encode(obj.asset_kind_10, buf, offset)
      offset += enc[1].encode.bytes
    }
    if (defined(obj.asset_kind_11)) {
      buf[offset++] = 90
      varint.encode(enc[2].encodingLength(obj.asset_kind_11), buf, offset)
      offset += varint.encode.bytes
      enc[2].encode(obj.asset_kind_11, buf, offset)
      offset += enc[2].encode.bytes
    }
    if (defined(obj.asset_kind_12)) {
      buf[offset++] = 98
      varint.encode(enc[3].encodingLength(obj.asset_kind_12), buf, offset)
      offset += varint.encode.bytes
      enc[3].encode(obj.asset_kind_12, buf, offset)
      offset += enc[3].encode.bytes
    }
    if (defined(obj.asset_kind_4)) {
      buf[offset++] = 34
      varint.encode(enc[4].encodingLength(obj.asset_kind_4), buf, offset)
      offset += varint.encode.bytes
      enc[4].encode(obj.asset_kind_4, buf, offset)
      offset += enc[4].encode.bytes
    }
    if (defined(obj.asset_kind_5)) {
      buf[offset++] = 42
      varint.encode(enc[5].encodingLength(obj.asset_kind_5), buf, offset)
      offset += varint.encode.bytes
      enc[5].encode(obj.asset_kind_5, buf, offset)
      offset += enc[5].encode.bytes
    }
    if (defined(obj.asset_kind_7)) {
      buf[offset++] = 58
      varint.encode(enc[6].encodingLength(obj.asset_kind_7), buf, offset)
      offset += varint.encode.bytes
      enc[6].encode(obj.asset_kind_7, buf, offset)
      offset += enc[6].encode.bytes
    }
    if (defined(obj.asset_kind_6)) {
      buf[offset++] = 50
      varint.encode(enc[7].encodingLength(obj.asset_kind_6), buf, offset)
      offset += varint.encode.bytes
      enc[7].encode(obj.asset_kind_6, buf, offset)
      offset += enc[7].encode.bytes
    }
    if (defined(obj.asset_kind_8)) {
      buf[offset++] = 66
      varint.encode(enc[8].encodingLength(obj.asset_kind_8), buf, offset)
      offset += varint.encode.bytes
      enc[8].encode(obj.asset_kind_8, buf, offset)
      offset += enc[8].encode.bytes
    }
    if (defined(obj.asset_kind_9)) {
      buf[offset++] = 74
      varint.encode(enc[9].encodingLength(obj.asset_kind_9), buf, offset)
      offset += varint.encode.bytes
      enc[9].encode(obj.asset_kind_9, buf, offset)
      offset += enc[9].encode.bytes
    }
    if (defined(obj.asset_kind_1)) {
      buf[offset++] = 10
      varint.encode(enc[10].encodingLength(obj.asset_kind_1), buf, offset)
      offset += varint.encode.bytes
      enc[10].encode(obj.asset_kind_1, buf, offset)
      offset += enc[10].encode.bytes
    }
    if (defined(obj.asset_kind_3)) {
      buf[offset++] = 26
      varint.encode(enc[11].encodingLength(obj.asset_kind_3), buf, offset)
      offset += varint.encode.bytes
      enc[11].encode(obj.asset_kind_3, buf, offset)
      offset += enc[11].encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      asset_kind_2: null,
      asset_kind_10: null,
      asset_kind_11: null,
      asset_kind_12: null,
      asset_kind_4: null,
      asset_kind_5: null,
      asset_kind_7: null,
      asset_kind_6: null,
      asset_kind_8: null,
      asset_kind_9: null,
      asset_kind_1: null,
      asset_kind_3: null
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 2:
        delete obj.asset_kind_10
        delete obj.asset_kind_11
        delete obj.asset_kind_12
        delete obj.asset_kind_4
        delete obj.asset_kind_5
        delete obj.asset_kind_7
        delete obj.asset_kind_6
        delete obj.asset_kind_8
        delete obj.asset_kind_9
        delete obj.asset_kind_1
        delete obj.asset_kind_3
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.asset_kind_2 = enc[0].decode(buf, offset, offset + len)
        offset += enc[0].decode.bytes
        break
        case 10:
        delete obj.asset_kind_2
        delete obj.asset_kind_11
        delete obj.asset_kind_12
        delete obj.asset_kind_4
        delete obj.asset_kind_5
        delete obj.asset_kind_7
        delete obj.asset_kind_6
        delete obj.asset_kind_8
        delete obj.asset_kind_9
        delete obj.asset_kind_1
        delete obj.asset_kind_3
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.asset_kind_10 = enc[1].decode(buf, offset, offset + len)
        offset += enc[1].decode.bytes
        break
        case 11:
        delete obj.asset_kind_2
        delete obj.asset_kind_10
        delete obj.asset_kind_12
        delete obj.asset_kind_4
        delete obj.asset_kind_5
        delete obj.asset_kind_7
        delete obj.asset_kind_6
        delete obj.asset_kind_8
        delete obj.asset_kind_9
        delete obj.asset_kind_1
        delete obj.asset_kind_3
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.asset_kind_11 = enc[2].decode(buf, offset, offset + len)
        offset += enc[2].decode.bytes
        break
        case 12:
        delete obj.asset_kind_2
        delete obj.asset_kind_10
        delete obj.asset_kind_11
        delete obj.asset_kind_4
        delete obj.asset_kind_5
        delete obj.asset_kind_7
        delete obj.asset_kind_6
        delete obj.asset_kind_8
        delete obj.asset_kind_9
        delete obj.asset_kind_1
        delete obj.asset_kind_3
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.asset_kind_12 = enc[3].decode(buf, offset, offset + len)
        offset += enc[3].decode.bytes
        break
        case 4:
        delete obj.asset_kind_2
        delete obj.asset_kind_10
        delete obj.asset_kind_11
        delete obj.asset_kind_12
        delete obj.asset_kind_5
        delete obj.asset_kind_7
        delete obj.asset_kind_6
        delete obj.asset_kind_8
        delete obj.asset_kind_9
        delete obj.asset_kind_1
        delete obj.asset_kind_3
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.asset_kind_4 = enc[4].decode(buf, offset, offset + len)
        offset += enc[4].decode.bytes
        break
        case 5:
        delete obj.asset_kind_2
        delete obj.asset_kind_10
        delete obj.asset_kind_11
        delete obj.asset_kind_12
        delete obj.asset_kind_4
        delete obj.asset_kind_7
        delete obj.asset_kind_6
        delete obj.asset_kind_8
        delete obj.asset_kind_9
        delete obj.asset_kind_1
        delete obj.asset_kind_3
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.asset_kind_5 = enc[5].decode(buf, offset, offset + len)
        offset += enc[5].decode.bytes
        break
        case 7:
        delete obj.asset_kind_2
        delete obj.asset_kind_10
        delete obj.asset_kind_11
        delete obj.asset_kind_12
        delete obj.asset_kind_4
        delete obj.asset_kind_5
        delete obj.asset_kind_6
        delete obj.asset_kind_8
        delete obj.asset_kind_9
        delete obj.asset_kind_1
        delete obj.asset_kind_3
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.asset_kind_7 = enc[6].decode(buf, offset, offset + len)
        offset += enc[6].decode.bytes
        break
        case 6:
        delete obj.asset_kind_2
        delete obj.asset_kind_10
        delete obj.asset_kind_11
        delete obj.asset_kind_12
        delete obj.asset_kind_4
        delete obj.asset_kind_5
        delete obj.asset_kind_7
        delete obj.asset_kind_8
        delete obj.asset_kind_9
        delete obj.asset_kind_1
        delete obj.asset_kind_3
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.asset_kind_6 = enc[7].decode(buf, offset, offset + len)
        offset += enc[7].decode.bytes
        break
        case 8:
        delete obj.asset_kind_2
        delete obj.asset_kind_10
        delete obj.asset_kind_11
        delete obj.asset_kind_12
        delete obj.asset_kind_4
        delete obj.asset_kind_5
        delete obj.asset_kind_7
        delete obj.asset_kind_6
        delete obj.asset_kind_9
        delete obj.asset_kind_1
        delete obj.asset_kind_3
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.asset_kind_8 = enc[8].decode(buf, offset, offset + len)
        offset += enc[8].decode.bytes
        break
        case 9:
        delete obj.asset_kind_2
        delete obj.asset_kind_10
        delete obj.asset_kind_11
        delete obj.asset_kind_12
        delete obj.asset_kind_4
        delete obj.asset_kind_5
        delete obj.asset_kind_7
        delete obj.asset_kind_6
        delete obj.asset_kind_8
        delete obj.asset_kind_1
        delete obj.asset_kind_3
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.asset_kind_9 = enc[9].decode(buf, offset, offset + len)
        offset += enc[9].decode.bytes
        break
        case 1:
        delete obj.asset_kind_2
        delete obj.asset_kind_10
        delete obj.asset_kind_11
        delete obj.asset_kind_12
        delete obj.asset_kind_4
        delete obj.asset_kind_5
        delete obj.asset_kind_7
        delete obj.asset_kind_6
        delete obj.asset_kind_8
        delete obj.asset_kind_9
        delete obj.asset_kind_3
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.asset_kind_1 = enc[10].decode(buf, offset, offset + len)
        offset += enc[10].decode.bytes
        break
        case 3:
        delete obj.asset_kind_2
        delete obj.asset_kind_10
        delete obj.asset_kind_11
        delete obj.asset_kind_12
        delete obj.asset_kind_4
        delete obj.asset_kind_5
        delete obj.asset_kind_7
        delete obj.asset_kind_6
        delete obj.asset_kind_8
        delete obj.asset_kind_9
        delete obj.asset_kind_1
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.asset_kind_3 = enc[11].decode(buf, offset, offset + len)
        offset += enc[11].decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineAsset_kind_2 () {
  var enc = [
    encodings.string,
    Bill
  ]

  Asset_kind_2.encodingLength = encodingLength
  Asset_kind_2.encode = encode
  Asset_kind_2.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.address)) {
      var len = enc[0].encodingLength(obj.address)
      length += 1 + len
    }
    if (defined(obj.bills)) {
      for (var i = 0; i < obj.bills.length; i++) {
        if (!defined(obj.bills[i])) continue
        var len = enc[1].encodingLength(obj.bills[i])
        length += varint.encodingLength(len)
        length += 1 + len
      }
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.address)) {
      buf[offset++] = 10
      enc[0].encode(obj.address, buf, offset)
      offset += enc[0].encode.bytes
    }
    if (defined(obj.bills)) {
      for (var i = 0; i < obj.bills.length; i++) {
        if (!defined(obj.bills[i])) continue
        buf[offset++] = 18
        varint.encode(enc[1].encodingLength(obj.bills[i]), buf, offset)
        offset += varint.encode.bytes
        enc[1].encode(obj.bills[i], buf, offset)
        offset += enc[1].encode.bytes
      }
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      address: "",
      bills: []
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.address = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        case 2:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.bills.push(enc[1].decode(buf, offset, offset + len))
        offset += enc[1].decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineAsset_kind_10 () {
  var enc = [
    encodings.bytes
  ]

  Asset_kind_10.encodingLength = encodingLength
  Asset_kind_10.encode = encode
  Asset_kind_10.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.hash)) {
      var len = enc[0].encodingLength(obj.hash)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.hash)) {
      buf[offset++] = 10
      enc[0].encode(obj.hash, buf, offset)
      offset += enc[0].encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      hash: null
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.hash = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineAsset_kind_11 () {
  var enc = [
    encodings.varint
  ]

  Asset_kind_11.encodingLength = encodingLength
  Asset_kind_11.encode = encode
  Asset_kind_11.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.number)) {
      var len = enc[0].encodingLength(obj.number)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.number)) {
      buf[offset++] = 8
      enc[0].encode(obj.number, buf, offset)
      offset += enc[0].encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      number: 0
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.number = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineAsset_kind_12 () {
  var enc = [
    encodings.string
  ]

  Asset_kind_12.encodingLength = encodingLength
  Asset_kind_12.encode = encode
  Asset_kind_12.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.string)) {
      var len = enc[0].encodingLength(obj.string)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.string)) {
      buf[offset++] = 10
      enc[0].encode(obj.string, buf, offset)
      offset += enc[0].encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      string: ""
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.string = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineAsset_kind_4 () {
  var enc = [
    encodings.string,
    encodings.varint
  ]

  Asset_kind_4.encodingLength = encodingLength
  Asset_kind_4.encode = encode
  Asset_kind_4.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.diamond)) {
      var len = enc[0].encodingLength(obj.diamond)
      length += 1 + len
    }
    if (defined(obj.nonce)) {
      var len = enc[1].encodingLength(obj.nonce)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.diamond)) {
      buf[offset++] = 10
      enc[0].encode(obj.diamond, buf, offset)
      offset += enc[0].encode.bytes
    }
    if (defined(obj.nonce)) {
      buf[offset++] = 16
      enc[1].encode(obj.nonce, buf, offset)
      offset += enc[1].encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      diamond: "",
      nonce: 0
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.diamond = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        case 2:
        obj.nonce = enc[1].decode(buf, offset)
        offset += enc[1].decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineAsset_kind_5 () {
  var enc = [
    encodings.string
  ]

  Asset_kind_5.encodingLength = encodingLength
  Asset_kind_5.encode = encode
  Asset_kind_5.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.diamond)) {
      var len = enc[0].encodingLength(obj.diamond)
      length += 1 + len
    }
    if (defined(obj.address)) {
      var len = enc[0].encodingLength(obj.address)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.diamond)) {
      buf[offset++] = 10
      enc[0].encode(obj.diamond, buf, offset)
      offset += enc[0].encode.bytes
    }
    if (defined(obj.address)) {
      buf[offset++] = 18
      enc[0].encode(obj.address, buf, offset)
      offset += enc[0].encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      diamond: "",
      address: ""
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.diamond = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        case 2:
        obj.address = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineAsset_kind_7 () {
  var enc = [
    OrgElmForm
  ]

  Asset_kind_7.encodingLength = encodingLength
  Asset_kind_7.encode = encode
  Asset_kind_7.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.forms)) {
      for (var i = 0; i < obj.forms.length; i++) {
        if (!defined(obj.forms[i])) continue
        var len = enc[0].encodingLength(obj.forms[i])
        length += varint.encodingLength(len)
        length += 1 + len
      }
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.forms)) {
      for (var i = 0; i < obj.forms.length; i++) {
        if (!defined(obj.forms[i])) continue
        buf[offset++] = 10
        varint.encode(enc[0].encodingLength(obj.forms[i]), buf, offset)
        offset += varint.encode.bytes
        enc[0].encode(obj.forms[i], buf, offset)
        offset += enc[0].encode.bytes
      }
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      forms: []
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.forms.push(enc[0].decode(buf, offset, offset + len))
        offset += enc[0].decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineAsset_kind_6 () {
  var enc = [
    encodings.varint,
    OrgElmForm
  ]

  Asset_kind_6.encodingLength = encodingLength
  Asset_kind_6.encode = encode
  Asset_kind_6.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.satisfyVoteRatio)) {
      var len = enc[0].encodingLength(obj.satisfyVoteRatio)
      length += 1 + len
    }
    if (defined(obj.forms)) {
      for (var i = 0; i < obj.forms.length; i++) {
        if (!defined(obj.forms[i])) continue
        var len = enc[1].encodingLength(obj.forms[i])
        length += varint.encodingLength(len)
        length += 1 + len
      }
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.satisfyVoteRatio)) {
      buf[offset++] = 8
      enc[0].encode(obj.satisfyVoteRatio, buf, offset)
      offset += enc[0].encode.bytes
    }
    if (defined(obj.forms)) {
      for (var i = 0; i < obj.forms.length; i++) {
        if (!defined(obj.forms[i])) continue
        buf[offset++] = 18
        varint.encode(enc[1].encodingLength(obj.forms[i]), buf, offset)
        offset += varint.encode.bytes
        enc[1].encode(obj.forms[i], buf, offset)
        offset += enc[1].encode.bytes
      }
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      satisfyVoteRatio: 0,
      forms: []
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.satisfyVoteRatio = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        case 2:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.forms.push(enc[1].decode(buf, offset, offset + len))
        offset += enc[1].decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineAsset_kind_8 () {
  var enc = [
    OrgElmFormDel
  ]

  Asset_kind_8.encodingLength = encodingLength
  Asset_kind_8.encode = encode
  Asset_kind_8.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.forms)) {
      for (var i = 0; i < obj.forms.length; i++) {
        if (!defined(obj.forms[i])) continue
        var len = enc[0].encodingLength(obj.forms[i])
        length += varint.encodingLength(len)
        length += 1 + len
      }
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.forms)) {
      for (var i = 0; i < obj.forms.length; i++) {
        if (!defined(obj.forms[i])) continue
        buf[offset++] = 10
        varint.encode(enc[0].encodingLength(obj.forms[i]), buf, offset)
        offset += varint.encode.bytes
        enc[0].encode(obj.forms[i], buf, offset)
        offset += enc[0].encode.bytes
      }
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      forms: []
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.forms.push(enc[0].decode(buf, offset, offset + len))
        offset += enc[0].decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineAsset_kind_9 () {
  var enc = [
    encodings.varint
  ]

  Asset_kind_9.encodingLength = encodingLength
  Asset_kind_9.encode = encode
  Asset_kind_9.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.satisfyVoteRatio)) {
      var len = enc[0].encodingLength(obj.satisfyVoteRatio)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.satisfyVoteRatio)) {
      buf[offset++] = 8
      enc[0].encode(obj.satisfyVoteRatio, buf, offset)
      offset += enc[0].encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      satisfyVoteRatio: 0
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.satisfyVoteRatio = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineAsset_kind_1 () {
  var enc = [
    encodings.string,
    Bill
  ]

  Asset_kind_1.encodingLength = encodingLength
  Asset_kind_1.encode = encode
  Asset_kind_1.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.address)) {
      var len = enc[0].encodingLength(obj.address)
      length += 1 + len
    }
    if (defined(obj.bills)) {
      for (var i = 0; i < obj.bills.length; i++) {
        if (!defined(obj.bills[i])) continue
        var len = enc[1].encodingLength(obj.bills[i])
        length += varint.encodingLength(len)
        length += 1 + len
      }
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.address)) {
      buf[offset++] = 10
      enc[0].encode(obj.address, buf, offset)
      offset += enc[0].encode.bytes
    }
    if (defined(obj.bills)) {
      for (var i = 0; i < obj.bills.length; i++) {
        if (!defined(obj.bills[i])) continue
        buf[offset++] = 18
        varint.encode(enc[1].encodingLength(obj.bills[i]), buf, offset)
        offset += varint.encode.bytes
        enc[1].encode(obj.bills[i], buf, offset)
        offset += enc[1].encode.bytes
      }
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      address: "",
      bills: []
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.address = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        case 2:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.bills.push(enc[1].decode(buf, offset, offset + len))
        offset += enc[1].decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineAsset_kind_3 () {
  var enc = [
    encodings.string,
    Bill
  ]

  Asset_kind_3.encodingLength = encodingLength
  Asset_kind_3.encode = encode
  Asset_kind_3.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.fromAddress)) {
      var len = enc[0].encodingLength(obj.fromAddress)
      length += 1 + len
    }
    if (defined(obj.toAddress)) {
      var len = enc[0].encodingLength(obj.toAddress)
      length += 1 + len
    }
    if (defined(obj.bills)) {
      for (var i = 0; i < obj.bills.length; i++) {
        if (!defined(obj.bills[i])) continue
        var len = enc[1].encodingLength(obj.bills[i])
        length += varint.encodingLength(len)
        length += 1 + len
      }
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.fromAddress)) {
      buf[offset++] = 10
      enc[0].encode(obj.fromAddress, buf, offset)
      offset += enc[0].encode.bytes
    }
    if (defined(obj.toAddress)) {
      buf[offset++] = 18
      enc[0].encode(obj.toAddress, buf, offset)
      offset += enc[0].encode.bytes
    }
    if (defined(obj.bills)) {
      for (var i = 0; i < obj.bills.length; i++) {
        if (!defined(obj.bills[i])) continue
        buf[offset++] = 26
        varint.encode(enc[1].encodingLength(obj.bills[i]), buf, offset)
        offset += varint.encode.bytes
        enc[1].encode(obj.bills[i], buf, offset)
        offset += enc[1].encode.bytes
      }
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      fromAddress: "",
      toAddress: "",
      bills: []
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.fromAddress = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        case 2:
        obj.toAddress = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        case 3:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.bills.push(enc[1].decode(buf, offset, offset + len))
        offset += enc[1].decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defined (val) {
  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))
}
